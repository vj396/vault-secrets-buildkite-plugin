#!/usr/bin/env bash

set -euo pipefail

_source="${BASH_SOURCE[0]}"
[ -z "${_source:-}" ] && _source="${0}"
basedir="$( cd "$( dirname "${_source}" )" && cd .. && pwd )"

# shellcheck disable=SC1090
. "$basedir/lib/shared.sh"

readonly default_image="vault"
readonly default_tag="1.10.2"
readonly image="${BUILDKITE_PLUGIN_VAULT_SECRETS_IMAGE:-${default_image}}:${BUILDKITE_PLUGIN_VAULT_SECRETS_TAG:-${default_tag}}"
readonly container_name="vault-secrets-env-plugin-${BUILDKITE_JOB_ID}"

# Fail if there is no Vault token; need to be able to auth with vault.
########################################################################
if [ -n "${BUILDKITE_PLUGIN_VAULT_SECRETS_TOKEN:-}" ]; then
    VAULT_TOKEN="${BUILDKITE_PLUGIN_VAULT_SECRETS_TOKEN}"
    export VAULT_TOKEN
fi

if [ -z "${VAULT_TOKEN:-}" ]; then
  if [ -n "${BUILDKITE_PLUGIN_VAULT_SECRETS_AUTH_METHOD:-"aws"}" ]; then
    vault_auth_${BUILDKITE_PLUGIN_VAULT_SECRETS_AUTH_METHOD:-"aws"}
  fi
  if [ -z "${VAULT_TOKEN:-}" ]; then
    echo "--- :skull_and_crossbones: Could not find 'VAULT_TOKEN' in the environment!"
    exit 1
  fi
fi

# Resolve Vault address
########################################################################
if [ -n "${BUILDKITE_PLUGIN_VAULT_SECRETS_ADDRESS:-}" ]; then
    VAULT_ADDR="${BUILDKITE_PLUGIN_VAULT_SECRETS_ADDRESS}"
    export VAULT_ADDR
fi
if [ -z "${VAULT_ADDR:-}" ]; then
    echo "--- :skull_and_crossbones: Could not find 'VAULT_ADDR' in the environment, and 'BUILDKITE_PLUGIN_VAULT_SECRETS_ADDRESS' was not specified!"
    exit 1
fi

# main logic
trap cleanup EXIT INT QUIT

# parse env items
while IFS='=' read -r name _ ; do
  if [[ $name =~ ^(BUILDKITE_PLUGIN_VAULT_SECRETS_ENV_) ]] ; then
    export_name=$(echo "${name}" | sed 's/^BUILDKITE_PLUGIN_VAULT_SECRETS_ENV_//')
    secret_path="$(strip_quotes "${!name}")"
    secret_base_path="$(dirname "$secret_path")"
    secret_key="$(basename "$secret_path")"
    load_secret_into_env "${export_name}" "${secret_base_path}" "${secret_key}"
  fi
done < <(env | sort)
